
  /* /!\ You need to add vendor prefixes in order to render the CSS properly (or simply use http://leaverou.github.io/prefixfree/) /!\ */ 
  .square {
    perspective: 800px;
    position: absolute;
    overflow: hidden;
    width: 100%;
    height: 100%;
    background: transparent;
    font-size: 100%;
    animation: shake_right 3s infinite;
  }
  .square .face {
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.4);
  }
  .square .scene,.square .shape,.square .face,.square .face-wrapper,.square .cr {
    position: absolute;
    transform-style: preserve-3d;
  }
  .square .scene {
    width: 80em;
    height: 80em;
    top: 50%;
    left: 50%;
    margin: -40em 0 0 -40em;
  }
  .square .shape {
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    transform-origin: 50%;
  }
  .square .face,.square .face-wrapper {
    overflow: hidden;
    transform-origin: 0 0;
    backface-visibility: hidden;
    /* hidden by default, prevent blinking and other weird rendering glitchs */
  }
  .square .face {
    background-size: 100% 100%!important;
    background-position: center;
  }
  .square .face-wrapper .face {
    left: 100%;
    width: 100%;
    height: 100%
  }
  .square .photon-shader {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-image: url('z/www/img/emoji/small/crown.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    background-color: rgb(245, 170, 58);
    border: solid 1px rgba(255, 255, 255, 0.89);
    border-radius: 1em;
  }
  .square .side {
    left: 50%;
  }
  .square .cr, .square .cr .side {
    height: 100%;
  }
  [class*="cuboid"] .ft, [class*="cuboid"] .bk {
    width: 100%;
    height: 100%;
  }
  [class*="cuboid"] .bk {
    left: 100%;
  }
  [class*="cuboid"] .rt {
    transform: rotateY(-90deg) translateX(-50%);
  }
  [class*="cuboid"] .lt {
    transform: rotateY(90deg) translateX(-50%);
  }
  [class*="cuboid"] .tp {
    transform: rotateX(90deg) translateY(-50%);
  }
  [class*="cuboid"] .bm {
    transform: rotateX(-90deg) translateY(-50%);
  }
  [class*="cuboid"] .lt {
    left: 100%;
  }
  [class*="cuboid"] .bm {
    top: 100%;
  }
  /* .cub-1 styles */
  .square .cub-1 {
    transform:translate3D(0em, 0em, 0.125em) rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    opacity:1;
    width:6em;
    height:6em;
    margin:-3em 0 0 -3em;
  }
  .square .cub-1 .ft {
    transform:translateZ(3em);
  }
  .square .cub-1 .bk {
    transform:translateZ(-3em) rotateY(180deg);
  }
  .square .cub-1 .rt, .cub-1 .lt {
    width:6em;
    height:6em;
  }
  .square .cub-1 .tp, .cub-1 .bm {
    width:6em;
    height:6em;
  }
  .square .cub-1 .face {
    background-color:#FFFFFF;
  }

  /*===================================================================*/

  /* /!\ You need to add vendor prefixes in order to render the CSS properly (or simply use http://leaverou.github.io/prefixfree/) /!\ */ #tridiv {
    perspective: 800px;
    position: absolute;
    overflow: hidden;
    width: 100%;
    height: 100%;
    background: transparent;
    font-size: 100%;
  }
  .face {
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.4);
  }
  .scene, .shape, .face, .face-wrapper, .cr {
    position: absolute;
    transform-style: preserve-3d;
  }
  .scene {
    width: 80em;
    height: 80em;
    top: 50%;
    left: 50%;
    margin: -40em 0 0 -40em;
  }
  .shape {
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    transform-origin: 50%;
  }
  .face, .face-wrapper {
    overflow: hidden;
    transform-origin: 0 0;
    backface-visibility: hidden;
    /* hidden by default, prevent blinking and other weird rendering glitchs */
  }
  .face {
    background-size: 100% 100%!important;
    background-position: center;
  }
  .face-wrapper .face {
    left: 100%;
    width: 100%;
    height: 100%
  }
  .photon-shader {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgb(0, 0, 0);
    border: solid 1px white;
  }
  .side {
    left: 50%;
  }
  .cr, .cr .side {
    height: 100%;
  }
  [class*="cylinder"] .tp {
    transform: rotateX(90deg) translateY(-50%);
  }
  [class*="cylinder"] .bm {
    transform: rotateX(-90deg) translateY(-50%);
  }
  [class*="cylinder"] .tp, [class*="cylinder"] .bm, [class*="cylinder"] .tp .photon-shader, [class*="cylinder"] .bm .photon-shader {
    border-radius: 50%;
  }
  [class*="cylinder"] .bm {
    top: 100%;
  }
  /* .cyl-1 styles */
  .cyl-1 {
    transform:translate3D(0em, 0em, 0em) rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    opacity:1;
    width:6em;
    height:5em;
    margin:-2.5em 0 0 -3em;
  }
  .cyl-1 .tp, .cyl-1 .bm {
    width:6em;
    height:6em;
  }
  .cyl-1 .side {
    width:1.3944608463408996em;
    height:5em;
  }
  .cyl-1 .s0 {
    transform: rotateY(12.857142857142858deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s1 {
    transform: rotateY(38.57142857142857deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s2 {
    transform: rotateY(64.28571428571429deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s3 {
    transform: rotateY(90deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s4 {
    transform: rotateY(115.71428571428572deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s5 {
    transform: rotateY(141.42857142857144deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s6 {
    transform: rotateY(167.14285714285714deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s7 {
    transform: rotateY(192.85714285714286deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s8 {
    transform: rotateY(218.57142857142858deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s9 {
    transform: rotateY(244.2857142857143deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s10 {
    transform: rotateY(270deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s11 {
    transform: rotateY(295.7142857142857deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s12 {
    transform: rotateY(321.4285714285714deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .s13 {
    transform: rotateY(347.1428571428571deg) translate3D(-50%, 0, 2.975em);
  }
  .cyl-1 .face, .cyl-1 .side {
    background-color:#FFFFFF;
  }
  